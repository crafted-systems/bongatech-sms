<?php
/**
 * Created by PhpStorm.
 * User: vincent
 * Date: 12/12/17
 * Time: 12:10 AM
 */

namespace CraftedSystems\Bongatech;

use GuzzleHttp\Client;

class BongatechSMS
{
    /**
     * Version number of the SMS API.
     *
     * @var string
     */
    const VERSION = '3.0.0';

    /**
     * Base URL.
     *
     * @var string
     */
    const BASE_URL = 'http://197.248.4.47/smsapi/';

    /**
     * Send SMS endpoint.
     *
     * @var string
     */
    const SMS_ENDPOINT = 'submit.php';

    /**
     * Get Balance endpoint.
     *
     * @var string
     */
    const GET_BALANCE_ENDPOINT = 'balance.php';

    /**
     * token is generated by md5(password).
     *
     * @var string
     */
    protected $token;

    /**
     * timestamp is the current datetime.
     *
     * @var string
     */
    protected $timestamp;


    /**
     * sms configurations.
     *
     * @array config
     */
    protected $config;

    /**
     * end point url.
     *
     * @string endpoint
     */
    protected $endpoint;

    /**
     * the message(s) being sent (array of messages in case message is different for each user.
     *
     * @var array.
     */
    protected $message;

    /**
     * the recipients .
     *
     * @var array.
     */
    protected $recipients;


    /**
     * BongatechSMS constructor.
     * @throws \Exception
     */
    public function __construct()
    {
        if (
            empty(config('bongatech-sms.user_id')) ||
            empty(config('bongatech-sms.password')) ||
            empty(config('bongatech-sms.sender_id'))
        ) {
            throw new \Exception('Please ensure that all Bongatech configuration variables have been set.');
        }

        $this->setTimestamp();
        $this->setToken();

    }

    /**
     * set the timestamp.
     */
    private function setTimestamp()
    {
        $this->timestamp = date('YmdHis');
    }

    /**
     * set the token.
     */
    private function setToken()
    {
        $this->token = md5(config('password'));
    }


    /**
     * @param $recipients
     * @param  $message
     *
     * @throws \Exception
     *
     * @return mixed
     */
    public function send($recipients, $message)
    {
        $this->recipients = $recipients;
        $this->message = $message;
        $this->endpoint = self::BASE_URL . self::SMS_ENDPOINT;

        if (is_array($this->message) && $this->array_depth($this->message) == 2 && count($this->message) == 1) {
            if (is_array($this->recipients) && $this->array_depth($this->recipients) == 2 && count($this->recipients) == 1) {
                $response = $this->sendSMS($this->buildSendObject($this->recipients, $this->message));
            } else {
                throw new \Exception('The recipient MUST be an array of depth 2 and count should not be more than 1');
            }
        } else {
            throw new \Exception('Message should be provided as an array whose depth is 2 and count should equal 1');
        }


        return $response;
    }

    /**
     * send a message to a single recipient.
     *
     * @param $body
     *
     */
    private function sendSMS($body)
    {
        $headers = [
            'Accept' => 'application/json',
        ];
        return '';
    }

    /**
     * build the send object.
     *
     * @param  $recipients
     * @param $messages
     *
     * @return array
     */
    private function buildSendObject($recipients, $messages)
    {
        $body = [
            'AuthDetails' => [
                [
                    'UserID' => config('user_id'),
                    'Token' => $this->token,
                    'Timestamp' => $this->timestamp,

                ],
            ],
            'MessageType' => [
                '0',
            ],
            'BatchType' => [
                '3',
            ],
            'SourceAddr' => [
                (string)config('sender_id'),
            ],
            'MessagePayload' => $messages,
            'DestinationAddr' => $recipients,
            'DeliveryRequest' => [
                [
                    'EndPoint' => config('callback_url'),
                    'Correlator' => (string)mt_rand(),
                ],
            ],
        ];

        return $body;
    }

    /**
     * returns depth of an array.see http://stackoverflow.com/a/262944.
     *
     * @param  $array
     *
     * @return int
     */
    private function array_depth(array $array)
    {
        $max_depth = 1;

        foreach ($array as $value) {
            if (is_array($value)) {
                $depth = $this->array_depth($value) + 1;

                if ($depth > $max_depth) {
                    $max_depth = $depth;
                }
            }
        }

        return $max_depth;
    }

    public static function getBalance()
    {

    }


}